name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: finch-mcp-stdio
            asset_name: finch-mcp-stdio-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: finch-mcp-stdio
            asset_name: finch-mcp-stdio-macos-aarch64
          
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: finch-mcp-stdio
            asset_name: finch-mcp-stdio-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: finch-mcp-stdio
            asset_name: finch-mcp-stdio-linux-aarch64
          
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: finch-mcp-stdio.exe
            asset_name: finch-mcp-stdio-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Display artifact structure
      run: ls -la artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release_assets
        
        # Create compressed archives for each platform
        for dir in artifacts/*/; do
          asset_name=$(basename "$dir")
          binary_path=$(find "$dir" -type f -executable -o -name "*.exe" | head -1)
          
          if [[ "$asset_name" == *"windows"* ]]; then
            # For Windows, create a zip file
            cd "$(dirname "$binary_path")"
            zip "../../release_assets/${asset_name}.zip" "$(basename "$binary_path")"
            cd - > /dev/null
          else
            # For Unix systems, create a tar.gz file
            cd "$(dirname "$binary_path")"
            tar -czf "../../release_assets/${asset_name}.tar.gz" "$(basename "$binary_path")"
            cd - > /dev/null
          fi
        done
        
        ls -la release_assets/

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## 🚀 finch-mcp-stdio ${{ steps.version.outputs.VERSION }}
        
        Pre-built binaries for multiple platforms. Download the appropriate binary for your system:
        
        ### macOS
        - **Intel Macs**: `finch-mcp-stdio-macos-x86_64.tar.gz`
        - **Apple Silicon (M1/M2/M3)**: `finch-mcp-stdio-macos-aarch64.tar.gz`
        
        ### Linux
        - **x86_64**: `finch-mcp-stdio-linux-x86_64.tar.gz`
        - **ARM64**: `finch-mcp-stdio-linux-aarch64.tar.gz`
        
        ### Windows
        - **x86_64**: `finch-mcp-stdio-windows-x86_64.exe.zip`
        
        ### Installation
        
        1. Download the appropriate binary for your platform
        2. Extract the archive (tar.gz for Unix, zip for Windows)
        3. Move the binary to a directory in your PATH
        4. Make it executable (Unix): `chmod +x finch-mcp-stdio`
        
        ### Usage
        
        ```bash
        # Run an MCP server command
        finch-mcp-stdio uvx mcp-server-time
        
        # Run from local directory
        finch-mcp-stdio ./my-mcp-project
        
        # Run from git repository
        finch-mcp-stdio https://github.com/user/mcp-repo
        ```
        
        ### Features
        
        - 🐳 Auto-containerization for commands
        - 📁 Local directory support
        - 🔗 Git repository cloning and building
        - 🏗️ Monorepo support (pnpm, yarn, npm workspaces)
        - 🐍 Python projects (Poetry, UV, pip)
        - 📦 Node.js projects (including TypeScript)
        - 🔧 Environment variables and volume mounting
        
        For more information, see the [README](https://github.com/mikeyobrien/finch-mcp/blob/main/README.md).
        EOF

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.version.outputs.VERSION }}
        name: finch-mcp-stdio ${{ steps.version.outputs.VERSION }}
        bodyFile: release_notes.md
        draft: false
        prerelease: false
        artifacts: "release_assets/*"
        token: ${{ secrets.GITHUB_TOKEN }}